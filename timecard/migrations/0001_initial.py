# Generated by Django 4.2.6 on 2023-10-30 22:36

import datetime
from django.conf import settings
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phone_field.models
import timecard.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ActiveUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('start_date', models.DateField(help_text='Start Date')),
                ('end_date', models.DateField(blank=True, default=None, help_text='End Date', null=True)),
                ('phone_number', phone_field.models.PhoneField(help_text='Mobile phone number', max_length=31, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', timecard.models.MyUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Period',
            fields=[
                ('period', models.AutoField(help_text='Period Primary Key', primary_key=True, serialize=False)),
                ('period_no', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12)], help_text='Period No within the calendar year')),
                ('calendar_year', models.IntegerField(help_text='Calendar year', validators=[django.core.validators.MinValueValidator(2023), django.core.validators.MaxValueValidator(9999)])),
                ('fiscal_year', models.CharField(help_text='Fiscal Year in the format FYyy', max_length=4)),
                ('starting_date', models.DateField(help_text='Starting Date of the Period')),
                ('reporting_date', models.DateField(help_text='Date/Hour when employee needs to report hours')),
                ('submission_date', models.DateField(help_text='Date when manager needs to submit for paycheck processing')),
                ('submission_time', models.TimeField(default='13:00:00', help_text='Time when manager needs to submit for paycheck processing')),
                ('pay_date', models.DateField(help_text='Date paycheck is to be received by Employee')),
                ('pay_time', models.TimeField(default=datetime.time(9, 0), help_text='Time of day Paycheck is expected')),
            ],
            options={
                'ordering': ['starting_date'],
            },
        ),
        migrations.CreateModel(
            name='PayrollHours',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_date', models.DateField(default=datetime.date.today, help_text='Date for Payroll Hour entry')),
                ('starting_time', models.TimeField(help_text='Starting Time for entry_date')),
                ('ending_time', models.TimeField(help_text='Ending Time + starting_time')),
                ('vacation_hours', models.BooleanField(default=False, help_text='Are these vacation hours')),
                ('adjustment_hours', models.IntegerField(default=0, help_text='Adjustment to hours from previous month')),
                ('adjustment_approved', models.BooleanField(default=False, help_text='Manager must approve the adjustment')),
                ('employee_submitted', models.BooleanField(default=False, help_text='Employee (preferred) must submit the hours')),
                ('period', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='timecard.period')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['entry_date', 'starting_time'],
            },
        ),
    ]
